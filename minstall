#!/usr/bin/env bash

has(){
  type "$1" > /dev/null 2>&1
}

echo_done(){
  echo -e "\033[32m ==> \033[0m$1"
}
echo_start(){
  echo -e "\033[34m ==> \033[0m$1"
}

zsh_path="${HOME}/.zshrc"

# 安装brew
if has brew; then
  echo_done 'brew is already installed'
else
  /usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
fi

# 要安装的命令列表
commands=(python wget autojump duti bash mysql telnet)
doneCommands=(`brew list`)

for command in ${commands[@]}
do
  if echo "${doneCommands[@]}" | grep -w "${command}" &>/dev/null; then
    echo_done "${command} has installed"
  else
    echo_start "begin to install ${command}"
    brew install ${command}
  fi
done

# cask 安装的app列表
caskApps=(qq wechat google-chrome webstorm iterm2 docker neteasemusic xquartz fontforge wireshark sequel-pro pdf-expert cheatsheet switchhosts vmware-fusion)
# 已经安装的app列表
caskDoneApps=(`brew cask list`)

for caskApp in ${caskApps[@]}
do
  if echo "${caskDoneApps[@]}" | grep -w "${caskApp}" &>/dev/null; then
    echo_done "${caskApp} is already installed"
  else
    echo_start "begin to install ${caskApp}"
    brew cask install ${caskApp}
  fi
done

# 安装oh-my-zsh
if [ -n "${ZSH}" ]; then
  echo_done "oh-my-zsh is already installed"
else
  echo_start "begin to install oh-my-zsh"
  sh -c "$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)"
fi

# 配置oh-my-zsh plugins
zsh_plugins_text=$(grep '^plugins=(' ${zsh_path})
zsh_plugins_inserts=(autojump npm)
for incert_text in ${zsh_plugins_inserts[@]}
do
  if echo ${zsh_plugins_text} | grep -qc "${incert_text}"; then
    echo_done "zsh plugins ${incert_text}已经配置"
  else
    echo_start "zsh plugins开始配置 ${incert_text}"
    sed -i "" "s/plugins=(\(.*\))/plugins=(\1 ${incert_text})/" ${zsh_path}
  fi
done

# 添加环境变量 以及自定义alias
zsh_path="${HOME}/.zshrc"
base_path=$(cd `dirname $0`; pwd)
env_path=${base_path/$HOME/'$HOME'}
if grep -qc "${env_path}" ${zsh_path}; then
  echo_done "环境变量已经配置"
else
  echo_start "开始设置环境变量"
  sed -i "" "2a\\
  export PATH=\$PATH:${env_path}
  " ${zsh_path}
  echo 'source malias' >> ${zsh_path}
fi

#

#安装 nvm
if [ -n "${NVM_DIR}" ]; then
  echo_done "nvm is already installed"
else
  echo_start "begin to install nvm"
  curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.34.0/install.sh | bash
fi

#安装node v10
node_source="nvm use 10"
if grep -qc "${node_source}" "${zsh_path}"; then
  echo_done "node is already installed"
else
  echo_start "begin to config node"
  source ${HOME}/.nvm/nvm.sh
  nvm i 10
  echo_done "append ${node_source} to zsh"
  echo ${node_source} >> ${zsh_path}
fi

# 添加提示
auto_sugest_text="source ~/.zsh/zsh-autosuggestions/zsh-autosuggestions.zsh"
if grep -qc "${auto_sugest_text}" "${zsh_path}"; then
  echo_done "autosuggestions is already installed"
else
  echo_start "begin to install autosuggestions"
  git clone https://github.com/zsh-users/zsh-autosuggestions ~/.zsh/zsh-autosuggestions
  echo ${auto_sugest_text} >> ${zsh_path}
fi

# 添加高亮语法
auto_sugest_text="source ~/.zsh/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh"
if grep -qc "${auto_sugest_text}" "${zsh_path}"; then
  echo_done "autosuggestions is already installed"
else
  echo_start "begin to install autosuggestions"
  git clone https://github.com/zsh-users/zsh-syntax-highlighting.git ~/.zsh/zsh-syntax-highlighting
  echo ${auto_sugest_text} >> ${zsh_path}
fi

# 设置文件默认打开应用
default_file_settings=(
com.readdle.PDFExpert-Mac:pdf
com.jetbrains.WebStorm:txt
com.jetbrains.WebStorm:js
com.jetbrains.WebStorm:css
com.jetbrains.WebStorm:html
)
for default_file_setting in ${default_file_settings[@]}
do
arr=(`echo ${default_file_setting} | tr ':' ' '`)
bundle_id=${arr[0]}
extension=${arr[1]}
/System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/LaunchServices.framework/Versions/A/Support/lsregister -dump | grep ${bundle_id} > /dev/null
if test $? -eq 1; then
  echo "${bundle_id} is not exist"
  exit
else
  duti -s ${bundle_id} ${extension} all
  echo -e "changing \033[35m${extension}\033[0m open with \033[35m${bundle_id}\033[0m"
fi
done

# 设置option left/right
if grep -qc "backward-word" ${zsh_path}; then
  echo_done "option left/right 已设置"
else
  echo_start "开始设置option left/right"
  echo 'bindkey "[D" backward-word' >> ${zsh_path}
  echo 'bindkey "[C" forward-word' >> ${zsh_path}
fi
